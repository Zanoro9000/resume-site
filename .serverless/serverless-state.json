{
  "service": {
    "service": "resume-site",
    "serviceObject": {
      "name": "resume-site"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs12.x",
      "stage": "dev",
      "region": "us-east-1",
      "profile": "devProfile",
      "variableSyntax": "\\${([^{}:]+?(?:\\(|:)(?:[^:{}][^{}]*?)?)}",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "404LogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/resume-site-dev-404"
            }
          },
          "NotDashfoundLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/resume-site-dev-not-found"
            }
          },
          "IndexLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/resume-site-dev-index"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "resume-site",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/resume-site-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/resume-site-dev*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "resume-site",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "404LambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/resume-site/dev/1614630528478-2021-03-01T20:28:48.478Z/resume-site.zip"
              },
              "Handler": "sls-next-build/404.html.render",
              "Runtime": "nodejs12.x",
              "FunctionName": "resume-site-dev-404",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "404LogGroup"
            ]
          },
          "NotDashfoundLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/resume-site/dev/1614630528478-2021-03-01T20:28:48.478Z/resume-site.zip"
              },
              "Handler": "sls-next-build/_error.render",
              "Runtime": "nodejs12.x",
              "FunctionName": "resume-site-dev-not-found",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "NotDashfoundLogGroup"
            ]
          },
          "IndexLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/resume-site/dev/1614630528478-2021-03-01T20:28:48.478Z/resume-site.zip"
              },
              "Handler": "sls-next-build/index.html.render",
              "Runtime": "nodejs12.x",
              "FunctionName": "resume-site-dev-index",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "IndexLogGroup"
            ]
          },
          "NotDashfoundLambdaVersionldoFnEtWLAXFeUtVeiWYig64eZJnDq6GzNERcfJaC4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "NotDashfoundLambdaFunction"
              },
              "CodeSha256": "qQcSQM/VlWT/5L51ErPwDKRf7ibjbKFYBPoSDF8KCqc="
            }
          },
          "IndexLambdaVersionZwkCK4Hd92uG7j7ZYPG40CamIMeBMo9JcHSeKqDVfM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "IndexLambdaFunction"
              },
              "CodeSha256": "qQcSQM/VlWT/5L51ErPwDKRf7ibjbKFYBPoSDF8KCqc="
            }
          },
          "404LambdaVersionnY70dNgTqhyavRn1fXsIuDk4JjGf1OCU2QrX1VVoJzY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "404LambdaFunction"
              },
              "CodeSha256": "qQcSQM/VlWT/5L51ErPwDKRf7ibjbKFYBPoSDF8KCqc="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-resume-site",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResource404html": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "404.html",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceProxyVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "{proxy+}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethod404htmlGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResource404html"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "404LambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethod404htmlHead": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "HEAD",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResource404html"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "404LambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodProxyVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProxyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "NotDashfoundLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodProxyVarHead": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "HEAD",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProxyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "NotDashfoundLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "IndexLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodHead": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "HEAD",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "IndexLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayDeployment1614630515937": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethod404htmlGet",
              "ApiGatewayMethod404htmlHead",
              "ApiGatewayMethodProxyVarGet",
              "ApiGatewayMethodProxyVarHead",
              "ApiGatewayMethodGet",
              "ApiGatewayMethodHead"
            ]
          },
          "404LambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "404LambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "NotDashfoundLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "NotDashfoundLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "IndexLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "IndexLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "NextStaticAssetsS3Bucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "AccessControl": "PublicRead",
              "CorsConfiguration": {
                "CorsRules": [
                  {
                    "AllowedHeaders": [
                      "*"
                    ],
                    "AllowedMethods": [
                      "GET"
                    ],
                    "AllowedOrigins": [
                      "*"
                    ],
                    "ExposedHeaders": [
                      "Date"
                    ],
                    "Id": "NextStaticAssetsS3BucketId1",
                    "MaxAge": "3600"
                  }
                ]
              },
              "BucketName": "resume-site-assets-dev",
              "WebsiteConfiguration": {
                "IndexDocument": "index.html",
                "ErrorDocument": "error.html"
              }
            },
            "DeletionPolicy": "Retain"
          },
          "NextStaticAssetsProxyParentResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "_next",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "NextStaticAssetsProxyResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "NextStaticAssetsProxyParentResource"
              },
              "PathPart": "{proxy+}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "NextStaticAssetsProxyMethod": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "ResourceId": {
                "Ref": "NextStaticAssetsProxyResource"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "HttpMethod": "GET",
              "MethodResponses": [
                {
                  "StatusCode": 200
                }
              ],
              "RequestParameters": {
                "method.request.path.proxy": true
              },
              "Integration": {
                "IntegrationHttpMethod": "GET",
                "Type": "HTTP_PROXY",
                "Uri": "https://s3.amazonaws.com/resume-site-assets-dev/_next/{proxy}",
                "RequestParameters": {
                  "integration.request.path.proxy": "method.request.path.proxy"
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": 200
                  }
                ]
              }
            }
          },
          "FaviconProxyResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "favicon.ico",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "FaviconProxyMethod": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "ResourceId": {
                "Ref": "FaviconProxyResource"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "HttpMethod": "GET",
              "MethodResponses": [
                {
                  "StatusCode": 200
                }
              ],
              "Integration": {
                "IntegrationHttpMethod": "ANY",
                "Type": "HTTP_PROXY",
                "Uri": "https://s3.amazonaws.com/resume-site-assets-dev/public/favicon.ico",
                "IntegrationResponses": [
                  {
                    "StatusCode": 200
                  }
                ]
              }
            }
          },
          "VercelProxyResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "vercel.svg",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "VercelProxyMethod": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "ResourceId": {
                "Ref": "VercelProxyResource"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "HttpMethod": "GET",
              "MethodResponses": [
                {
                  "StatusCode": 200
                }
              ],
              "Integration": {
                "IntegrationHttpMethod": "ANY",
                "Type": "HTTP_PROXY",
                "Uri": "https://s3.amazonaws.com/resume-site-assets-dev/public/vercel.svg",
                "IntegrationResponses": [
                  {
                    "StatusCode": 200
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "NotDashfoundLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "NotDashfoundLambdaVersionldoFnEtWLAXFeUtVeiWYig64eZJnDq6GzNERcfJaC4"
            }
          },
          "IndexLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "IndexLambdaVersionZwkCK4Hd92uG7j7ZYPG40CamIMeBMo9JcHSeKqDVfM"
            }
          },
          "404LambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "404LambdaVersionnY70dNgTqhyavRn1fXsIuDk4JjGf1OCU2QrX1VVoJzY"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            }
          },
          "NextStaticAssetsS3BucketWebsiteURL": {
            "Value": {
              "Fn::GetAtt": [
                "NextStaticAssetsS3Bucket",
                "WebsiteURL"
              ]
            },
            "Description": "URL for the S3 website hosting the static assets"
          },
          "NextStaticAssetsS3BucketSecureURL": {
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Fn::GetAtt": [
                      "NextStaticAssetsS3Bucket",
                      "DomainName"
                    ]
                  }
                ]
              ]
            },
            "Description": "S3 Bucket which holds the static assets"
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "NextStaticAssetsS3Bucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "AccessControl": "PublicRead",
              "CorsConfiguration": {
                "CorsRules": [
                  {
                    "AllowedHeaders": [
                      "*"
                    ],
                    "AllowedMethods": [
                      "GET"
                    ],
                    "AllowedOrigins": [
                      "*"
                    ],
                    "ExposedHeaders": [
                      "Date"
                    ],
                    "Id": "NextStaticAssetsS3BucketId1",
                    "MaxAge": "3600"
                  }
                ]
              },
              "BucketName": "resume-site-assets-dev",
              "WebsiteConfiguration": {
                "IndexDocument": "index.html",
                "ErrorDocument": "error.html"
              }
            },
            "DeletionPolicy": "Retain"
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "NextStaticAssetsS3BucketWebsiteURL": {
            "Value": {
              "Fn::GetAtt": [
                "NextStaticAssetsS3Bucket",
                "WebsiteURL"
              ]
            },
            "Description": "URL for the S3 website hosting the static assets"
          },
          "NextStaticAssetsS3BucketSecureURL": {
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Fn::GetAtt": [
                      "NextStaticAssetsS3Bucket",
                      "DomainName"
                    ]
                  }
                ]
              ]
            },
            "Description": "S3 Bucket which holds the static assets"
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "name": "resume-site",
      "serverless-nextjs": {
        "assetsBucketName": "resume-site-assets-dev"
      },
      "profiles": {
        "dev": "devProfile",
        "prod": "prodProfile"
      }
    },
    "plugins": [
      "serverless-nextjs-plugin"
    ],
    "pluginsData": {},
    "functions": {
      "404": {
        "handler": "sls-next-build/404.html.render",
        "events": [
          {
            "http": {
              "path": "404.html",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "404.html",
              "method": "head",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "resume-site-dev-404",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "404LambdaVersionnY70dNgTqhyavRn1fXsIuDk4JjGf1OCU2QrX1VVoJzY"
      },
      "not-found": {
        "handler": "sls-next-build/_error.render",
        "events": [
          {
            "http": {
              "path": "{proxy+}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "{proxy+}",
              "method": "head",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "resume-site-dev-not-found",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "NotDashfoundLambdaVersionldoFnEtWLAXFeUtVeiWYig64eZJnDq6GzNERcfJaC4"
      },
      "index": {
        "handler": "sls-next-build/index.html.render",
        "events": [
          {
            "http": {
              "path": "",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "",
              "method": "head",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "resume-site-dev-index",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "IndexLambdaVersionZwkCK4Hd92uG7j7ZYPG40CamIMeBMo9JcHSeKqDVfM"
      }
    },
    "resources": {
      "Resources": {
        "NextStaticAssetsS3Bucket": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "AccessControl": "PublicRead",
            "CorsConfiguration": {
              "CorsRules": [
                {
                  "AllowedHeaders": [
                    "*"
                  ],
                  "AllowedMethods": [
                    "GET"
                  ],
                  "AllowedOrigins": [
                    "*"
                  ],
                  "ExposedHeaders": [
                    "Date"
                  ],
                  "Id": "NextStaticAssetsS3BucketId1",
                  "MaxAge": "3600"
                }
              ]
            },
            "BucketName": "resume-site-assets-dev",
            "WebsiteConfiguration": {
              "IndexDocument": "index.html",
              "ErrorDocument": "error.html"
            }
          },
          "DeletionPolicy": "Retain"
        },
        "NextStaticAssetsProxyParentResource": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "_next",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "NextStaticAssetsProxyResource": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "NextStaticAssetsProxyParentResource"
            },
            "PathPart": "{proxy+}",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "NextStaticAssetsProxyMethod": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "ResourceId": {
              "Ref": "NextStaticAssetsProxyResource"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "HttpMethod": "GET",
            "MethodResponses": [
              {
                "StatusCode": 200
              }
            ],
            "RequestParameters": {
              "method.request.path.proxy": true
            },
            "Integration": {
              "IntegrationHttpMethod": "GET",
              "Type": "HTTP_PROXY",
              "Uri": "https://s3.amazonaws.com/resume-site-assets-dev/_next/{proxy}",
              "RequestParameters": {
                "integration.request.path.proxy": "method.request.path.proxy"
              },
              "IntegrationResponses": [
                {
                  "StatusCode": 200
                }
              ]
            }
          }
        },
        "FaviconProxyResource": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "favicon.ico",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "FaviconProxyMethod": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "ResourceId": {
              "Ref": "FaviconProxyResource"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "HttpMethod": "GET",
            "MethodResponses": [
              {
                "StatusCode": 200
              }
            ],
            "Integration": {
              "IntegrationHttpMethod": "ANY",
              "Type": "HTTP_PROXY",
              "Uri": "https://s3.amazonaws.com/resume-site-assets-dev/public/favicon.ico",
              "IntegrationResponses": [
                {
                  "StatusCode": 200
                }
              ]
            }
          }
        },
        "VercelProxyResource": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "vercel.svg",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "VercelProxyMethod": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "ResourceId": {
              "Ref": "VercelProxyResource"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "HttpMethod": "GET",
            "MethodResponses": [
              {
                "StatusCode": 200
              }
            ],
            "Integration": {
              "IntegrationHttpMethod": "ANY",
              "Type": "HTTP_PROXY",
              "Uri": "https://s3.amazonaws.com/resume-site-assets-dev/public/vercel.svg",
              "IntegrationResponses": [
                {
                  "StatusCode": 200
                }
              ]
            }
          }
        }
      },
      "Outputs": {
        "NextStaticAssetsS3BucketWebsiteURL": {
          "Value": {
            "Fn::GetAtt": [
              "NextStaticAssetsS3Bucket",
              "WebsiteURL"
            ]
          },
          "Description": "URL for the S3 website hosting the static assets"
        },
        "NextStaticAssetsS3BucketSecureURL": {
          "Value": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Fn::GetAtt": [
                    "NextStaticAssetsS3Bucket",
                    "DomainName"
                  ]
                }
              ]
            ]
          },
          "Description": "S3 Bucket which holds the static assets"
        }
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "layers": {},
    "initialServerlessConfig": {
      "resume-site": {
        "component": "serverless-next.js"
      },
      "service": {
        "$ref": "$[\"service\"][\"serviceObject\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "package": {
        "exclude": [
          "./**"
        ],
        "include": [
          "sls-next-build/**",
          "node_modules\\next-aws-lambda/**/*.js",
          "!node_modules\\next-aws-lambda/**/*.test.js"
        ],
        "artifact": "C:\\Users\\Tyler\\source\\repos\\resume-site\\.serverless\\resume-site.zip",
        "artifactDirectoryName": "serverless/resume-site/dev/1614630528478-2021-03-01T20:28:48.478Z"
      }
    },
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "C:\\Users\\Tyler\\source\\repos\\resume-site\\.serverless\\resume-site.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/resume-site/dev/1614630528478-2021-03-01T20:28:48.478Z",
    "artifact": "resume-site.zip"
  }
}